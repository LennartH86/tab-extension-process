import * as React from 'react';
import { ElemAttrs } from '../../utils/NativeProps';
import { ProhibitPropsFrom } from '../../utils/ReactHelpers';
import { SideTabsProps } from './SideTabs';
export declare type SideTabsPaneProps = (
/** controlled mode */
{
    initiallySelectedIndex?: never;
    /**
     * The content to render in the pane to the right of the tabs. Update it in response to the `onTabChange` prop on `tablist`.
     * @type ReactElement
     */
    children: React.ReactElement;
    /**
     * The tablist to render. DOM `id`s of the tabs will be overridden.
     * @type ReactElement<SideTabsProps>
     */
    tablist: React.ReactElement<SideTabsProps>;
} | 
/** uncontrolled mode */
{
    /**
     * @default 0
     */
    initiallySelectedIndex?: number;
    /**
     * The content to render in the pane to the right of the tabs. Should be the same length as the number of tabs.
     * e.g. `children[2]` will be rendered in the pane when tab index `2` is selected.
     * The component will handle the tab selection state internally.
     */
    children: Array<React.ReactElement>;
    /** The tablist to render. DOM `id`s of the tabs will be overridden. Props `onTabChange` and `selectedIndex` are provided internally.  */
    tablist: React.ReactElement<ProhibitPropsFrom<SideTabsProps, 'onChangeTab' | 'onTabChange' | 'selectedIndex'>>;
});
/**
 * A composition component which can be used to combine a `SideTabs` component with a content pane that the tabs control.
 * The correct ARIA attributes between the tab list and pane are applied automatically.
 *
 * There are two ways to provide the pane content:
 * * Controlled mode: If one child is provided, it will be rendered as the pane content. In response to the `onTabChange` prop on `tablist`,
 *   update the `children` prop, as well as the `selectedIndex` prop on the `tablist`.
 * * Uncontrolled mode: If an array of children is provided, they will be mapped into the list of tabs,
 *    i.e. `children[2]` will be rendered in the pane when tab index `2` is selected.
 *    In this case the component will handle the selection state internally. The `initiallySelectedIndex` prop may be used to pre-select the initial tab.
 *
 * Dimensions may be constrained via the usual routes, e.g. `style={{ height: 300, width: 600 }}`.
 * Both the side tabs and the content pane will scroll if they exceed the height of the overall component.
 */
export declare const SideTabsPane: React.FC<SideTabsPaneProps & Omit<ElemAttrs, keyof SideTabsProps>>;
