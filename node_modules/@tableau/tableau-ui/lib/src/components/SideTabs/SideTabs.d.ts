import * as React from 'react';
import { ElemAttrs } from '../../utils/NativeProps';
import { RequireAria, RequireLabel } from '../../utils/ReactHelpers';
export declare type ArrayOfSideTabElements = Array<React.ReactElement<SideTabProps & RequireAria<'aria-controls'>>>;
export declare type SideTabsProps = RequireLabel & {
    children: ArrayOfSideTabElements;
    /** When `true`, tab selection moves independently of focus. */
    manualActivation?: boolean;
    /** @deprecated instead use `onTabChange` */
    onChangeTab?: (index: number) => void;
    /** Invoked to change the currently-selected Tab. */
    onTabChange?: (index: number) => void;
    /** Index (into `children`) of the currently-selected Tab. */
    selectedIndex?: number;
};
/**
 * A side (vertical) tabs component. Generally expected to be used inside of a `SideTabsPane` but may be used separately if necessary.
 *
 * One of `aria-label` or `aria-labelledby` must be provided.
 * When used outside of a `SideTabsPane`, `aria-controls` must be added to each individual `SideTab`.
 */
export declare const SideTabs: React.FC<SideTabsProps & Omit<ElemAttrs, keyof SideTabsProps>>;
export declare type SideTabProps = {
    /** Accessibility requirements prohibit tooltips or other interactive content inside of a Tab. */
    children: React.ReactNode;
    /** Optional icon showed to the left of the tab label. Should be a 14x14 SVG element. */
    icon?: React.ReactElement;
    /** Optional DOM id of the tab element */
    id?: string;
    /**
     * When `false`, the Tab will grow in height to fit its content.
     * When `true`, the Tab will display a maximum of one line of text, and elide the text if it's too long to fit.
     */
    truncateLongText?: boolean;
};
/** Accessibility requirements prohibit tooltips or other interactive content inside of a Tab. */
export declare const SideTab: React.FC<SideTabProps>;
