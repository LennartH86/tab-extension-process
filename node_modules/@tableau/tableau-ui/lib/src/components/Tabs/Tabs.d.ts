import * as React from 'react';
import { DivAttrs } from '../../utils/NativeProps';
export interface TabItem {
    /** The content to be displayed within a tab */
    content: React.ReactNode;
    /** The title to use for the tab */
    title?: string;
}
export interface TabsProps {
    /**
     * * `"automatic"` activates the tab with focus when the tab receives focus
     * * `"manual"` activates the tab with focus when the user presses Space or Enter
     * @default '"automatic"'
     */
    activation?: 'automatic' | 'manual';
    /**
     * * `"justified"` evenly distributes the tabs within the tab list
     * * `"left"` left aligns the tabs within the tab list
     * @default '"justified"'
     */
    alignment?: 'justified' | 'left';
    /** The panel contents, corresponding to the current `selectedTabIndex`. */
    children?: React.ReactNode;
    /**
     * The function that will be called when the user indicates to change tabs.
     *
     * NOTE: As this is a fully-controlled component, `selectedTabIndex` should be passed back into the props to reflect the change.
     */
    onTabChange?: (selectedTabIndex: number) => void;
    /** The index of the currently-selected tab. */
    selectedTabIndex?: number;
    /**
     * An array of `TabItem`'s to be used to display tabs within the tab list.
     *
     ```
  TabItem = {
    // The content to be displayed within a tab
    content: React.ReactNode;
  
    // The title to use for the tab
    title?: string;
  }
     ```
     * @default []
     */
    tabs?: TabItem[];
}
export interface TabsState {
    focusedIndex: number;
}
/**
 * A controlled component which renders a list of tabs and a panel.
 *
 * Documented props will be used by this component. All other provided props will be passed to the root `<div>` element.
 */
export declare class Tabs extends React.PureComponent<TabsProps & DivAttrs, TabsState> {
    private tablistRef;
    private id;
    static defaultProps: Pick<TabsProps, 'activation' | 'alignment' | 'selectedTabIndex' | 'tabs'>;
    state: TabsState;
    componentDidUpdate(prevProps: TabsProps, prevState: TabsState): void;
    private triggerTabChange;
    private handleBlur;
    private handleClick;
    private handleKeyDown;
    private handleFocus;
    private setFocusedIndex;
    private buildTabId;
    private buildTabPanelId;
    private renderTabList;
    private renderTabPanel;
    render(): JSX.Element;
}
