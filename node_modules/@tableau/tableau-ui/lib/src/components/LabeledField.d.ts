import * as React from 'react';
export interface LabeledFieldProps {
    /** NOTE: applied to the root `<div>`, not the input field element. */
    className?: string;
    /** Label to display above the field. Must be provided to be WCAG-compliant. */
    label?: React.ReactNode;
    /** Ref to the rendered `<label>`. */
    labelRef?: React.Ref<HTMLLabelElement>;
    /**
     * If provided, the `<label>` element will use this string as its DOM id, rather than the default auto-generated value.
     * Primarily useful for referencing in e.g. `aria-labelledby` on a DOM-distant element.
     */
    labelId?: string;
    /**
     * The contents of the helper message under the field, if any.
     * Set to `<br />` to reserve vertical space for showing a validation message when `valid` is `undefined`.
     */
    message?: React.ReactNode;
    /**
     * * `undefined` or `null`: the field will be shown with normal coloring
     * * `"pending"`: the field will be shown with normal coloring and a loading animation
     * * `false`: the field will be shown with red coloring, and `aria-errormessage`/`aria-invalid` will be set on the input field element
     * * `true`: the field will be shown with green coloring
     * @default undefined
     */
    valid?: boolean | 'pending';
}
/**
 * This is an unsupported internal component. It is subject to change without notice.
 *
 * Wraps an input field element (e.g. `<input>`, `<select>`, `<textarea>`) with a label and a validation message.
 * Includes styling and WAI-ARIA attribute wiring.
 * `children` is a "render prop" function component which must apply its props to whatever input element it renders.
 */
export declare const LabeledField: React.FC<LabeledFieldProps & {
    children: React.FC<React.HTMLAttributes<HTMLElement>>;
    disabled?: boolean;
    id?: string;
}>;
