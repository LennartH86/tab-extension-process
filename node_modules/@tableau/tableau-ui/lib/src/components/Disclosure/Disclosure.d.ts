import * as React from 'react';
import { ButtonAttrs, ElemAttrs } from '../../utils/NativeProps';
export declare type DisclosureProps = {
    /**
     * Determines if the Disclosure chevron is aligned to the left or right.
     * @default 'left'
     */
    alignment?: 'left' | 'right';
    /** Attributes forwarded to the button element. */
    buttonAttrs?: ButtonAttrs;
    /** The content rendered when the Disclosure is expanded. */
    children?: React.ReactNode;
    /**
     * Whether the Disclosure expands up or down.
     * This changes whether the toggle button is above or below the expandable content.
     * @default ```'down'```
     */
    direction?: 'down' | 'up';
    /**
     * The type of Disclosure style to display.
     * @default 'default'
     */
    disclosureType?: 'default' | 'neutral' | 'red' | 'yellow' | 'green' | 'blue' | 'violet';
    /** Label for the Disclosure button. */
    label?: React.ReactNode;
    /** The icon to be displayed to the left of `label` when rendered. */
    labelIcon?: React.ReactChild | null;
    /**
     * By default `children` will be removed from the DOM when collapsed.
     * Setting this prop to `true` will keep them in the DOM with `display: none` instead.
     */
    keepChildrenMounted?: boolean;
    /** Suppresses background color when `isExpanded` is set to `true`. */
    noBackgroundWhenExpanded?: boolean;
    /** The sub-label to be displayed below `label` when rendered. */
    subLabel?: React.ReactNode;
} & ({
    /** **Controlled mode:** set to `true` when expanded. The callbacks `onCollapse` and `onExpand` are required in this mode. */
    isExpanded: boolean;
    isInitiallyExpanded?: never;
    /** **Controlled mode:** Invoked when the user wishes to collapse the Disclosure. Required when specifying the `isExpanded` prop. */
    onCollapse: () => void;
    /** **Controlled mode:** Invoked when the user wishes to expand the Disclosure. Required when specifying the `isExpanded` prop. */
    onExpand: () => void;
} | {
    isExpanded?: never;
    /** **Uncontrolled mode:** Expansion state upon initial render. */
    isInitiallyExpanded?: boolean;
    /** **Uncontrolled mode:** Invoked when the Disclosure collapses. */
    onCollapse?: () => void;
    /** **Uncontrolled mode:** Invoked when the Disclosure expands. */
    onExpand?: () => void;
});
export declare type DisclosureAlignment = NonNullable<DisclosureProps['alignment']>;
export declare type DisclosureDirection = NonNullable<DisclosureProps['direction']>;
export declare type DisclosureType = NonNullable<DisclosureProps['disclosureType']>;
export declare type DisclosureInstance = {
    /**
     * Toggles the Disclosure.
     * @param expanded optional parameter, ```true``` to expand or ```false``` to collapse
     */
    toggle: (expanded?: boolean) => void;
};
/**
 * Expands/collapses to show/hide content. Can be used as either a controlled or uncontrolled component.
 *
 * In controlled mode, the parent is responsible for controlling expansion state via the `isExpanded` prop, signaled by the `onCollapse` and `onExpand` props.
 *
 * In uncontrolled mode, the state is handled internally by the Disclosure, and can be defaulted using the `isInitiallyExpanded` prop.
 */
export declare const Disclosure: React.ForwardRefExoticComponent<(DisclosureProps & Omit<ElemAttrs<HTMLElement>, "children" | "onClick" | "label" | "buttonAttrs" | "disclosureType" | "alignment" | "direction" | "labelIcon" | "keepChildrenMounted" | "noBackgroundWhenExpanded" | "subLabel" | "isExpanded" | "isInitiallyExpanded" | "onCollapse" | "onExpand">) & React.RefAttributes<DisclosureInstance>>;
