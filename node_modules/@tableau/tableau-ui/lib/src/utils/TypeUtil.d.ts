export declare type Omit<T, K> = Pick<T, Exclude<keyof T, K>>;
export declare type FCProps<T> = T extends (arg1: infer U, ...args: unknown[]) => unknown ? U : undefined;
export declare function isNullOrUndefined(obj: unknown): obj is null | undefined;
export declare function defaultIfNothing<T>(obj: T | null | undefined, defaultValue: T): T;
export declare function typedKeys<T extends object>(o: T): Array<keyof T>;
